#This should be done with reference to GitOneDay_Notes.txt
1. Install git
	sudo su
	yum update
	yum upgrade
	
	yum install git
	
	or
	apt-get install git
	

2.	Configuring Git
	git config --global user.name "vilasvarghese"
	git config --global user.email "vilas_varghese@yahoo.com"




3.	Using Git help	
	
	To get help there are three equivalent ways:

		$ git help <verb>
		$ git <verb> --help
		$ man git-<verb>
		
4.	For example, you can get the man page help for the git config command by running this:
		$ git help config
	
	
5.	These commands works offline. 
	For  summary/concise “help” use -h option, as in:
		git add -h



6. 	•	Initializing a repository
	mkdir demo
	cd demo
	ls -a
	git status

	#Convert the folder to a git repo.
	git init
	ls
	ls -a
		- .git folder would be present.
		
	cd .git
		More on this folder latter.
		
		cd objects (.git/objects)
		ls
			objects
			pack
		
				However these are empty.
		
	Create 
		Abc.txt
		Xyz.txt
	ls -a
			Go back and check .git/objects folder
				No new folder
			
			
	git status
		Adding a file to staging area
	git add Abc.txt
			Go back and check .git/objects folder
				New folder created with hash.
				

	
	git status
		Notice add files and untracked files.

	Commit
		git commit -m "Learn git commit"

			Go back and check .git/objects folder
			New folders created with hash.

	Till now we are working on local repo. We don't need internet acccess for commands till here.
	
	Viewing only staged changes
	---------------------------
	add a new file to the repo.
	git diff --cached
		difference between local repo directory and staged(index)
		It shows you that changes that will be in the next commit.
	git diff
		Displays all changes made to the tracked files.
	git add .
	git diff --cached
	
	
7. 	Configuring the repository

		git config –global user.name “Your UserName”
		git config –global user.email “Your UserName”
		
		List all config
		git config --list
		
		core.repositoryformatversion
			https://stackoverflow.com/questions/5175208/what-are-the-different-repository-format-versions-for-the-core-repositoryformat
			https://dev.to/captainsafia/whats-in-a-git-config-3pni
		
		View a particular config
		git config --global
		git config user.name
		git config <key>
		
8. 	git add README.md test.txt LICENSE
	git commit -m 'Initial commit'	

9. 	git branch testing

10. git log --oneline

11. git checkout testing
		$ vi test.txt
		$ git add test.txt
		$ git commit -m "made a change"

12. git checkout master
		git checkout -b newissue
			Similar to 
				$ git branch newissue
				$ git checkout newissue #git switch newissue

13. vi index.html
	git add .
	git commit -m 'Fix issue'


	To delete files using Git:
	--------------------------
	git rm <filename>
	git rm <file1> <file2> <file3>

	git add .
	git commit -m "Delete files: filename(s)"

	To delete folders using Git:
	--------------------------
	git rm -r <folder>
	git rm -r <folder1> <folder2>
	

	git add .
	git commit -m "Delete folders: foldername(s)"



14. git checkout master
	
15. git checkout -b hotfix 
	- instead use git branch and git switch 
	
16. vi index.html
	git add *
	git commit -a -m 'Any comment'
	
17. git switch master
	git merge hotfix
	
	cd .git/logs
	cat HEAD
	
	cd .git\logs\refs\heads
	cat <branch name>
	
18. git branch -d hotfix

19. git checkout newissue

20. vi index.html
	git add *
	git commit -m 'Fix the issue'
	
21. git checkout master

22. git merge newissue

23. Create merge conflict.
	When does merge conflict happen?
	vi mergeConflict.txt
	Enter
		1
		2
		3
		4
		5
		6
		7
		8
		9
		10
	Save the file.	
	vi m1.txt
		Enter some data and save.
		
	vi m2.txt
		Enter some data and save.
	git add *
	git commit -m "create 3 files for testing"
	
24. Create two different branches.
	git branch b1
	git branch b2
	
25. Modify two different files in master and b1
	
	vi m1.txt
		Update the data and save.
	git add *
	git commit -m "updated m1"
	
	git checkout b1
	vi m2.txt
		Update the data in m2 and save
	git add *
	git commit -m "updated m2"
	
26. Merge b1 to master
	git checkout master
	git merge b1
		Any impact?
		
27. Modify m1 in b1 and add few lines
	git checkout b1
	vi m1
		add some lines and save
	git add *
	git commit -m "updated m1 - added some lines"
	
28. Update m1 in master without adding lines
	git checkout master
	vi m1
		Update the first line and save
	
29. Merge b1 to master
	git merge b1
		Any impact
		

30. 
----------------------------------------------------	
git diff
	Displays all changes made to the tracked files.

Modify a COMMITTED file (tracked file)
	to add a line 
	modify a line
	delete a line
	
	git diff
	
	
	Comparing files from two branches
	---------------------------------
	git diff master new_branch ./diff_test.txt

31. 
	#Delete the file from the staging and working area.
	git status
	git rm Efg.txt #People confuse git rm as the command to stage a removed file.
	git status

32. 
	#Alternatively to delete the file from staging but retain in working area.
	#If you want to continue to work on the file.
	git rm --cached <file>

	Add a file called cache.txt
	git add cache.txt
	git commit -m "add cache"
	git rm --cached cache.txt
	git status
	git commit -m "removed cache"
	git status
	git add *
	git status
	
33. 	
	git status
	add .gitignore
---------------------------
#ignore .class
*.class
---------------------------


34. Update the last commit comments
git log
	See 
		author
		date
		comment


 git commit --amend
 or
 git commit --amend --allow-empty
  
 opens your editor
	Make changes, save and close
 git log


35. Update the comments for an old commit

#Find the commit id using 
git log
git tag -a @author <<commit id>> -m Vilas

git log # Verify @author tag appears in the log now.
git tag # also displays @author
git show @author


36. Delete merged branch
	git branch -d feature1
	
	Delete unmerged branch
	git branch -D feature1
	
	git push <remote-name> --delete <branch-name>
	git push origin --delete feature/my-feature 
	
37. Move or rename

		ls
		git mv cache.txt cache1.txt
		git status
		git add *
		git commit -m "modified name"


38. List branches or see current branch
	git branch

  
 
39. Set a default merge tool 
	Create a merge conflict.
	
	git config --global merge.tool kdiff3
	
	Merge tool automtically detects conflict
		git mergetool


    git config merge.tool vimdiff
    git config merge.conflictstyle diff3
		git clean -fn #clean all extra files created by git.

	#more reference on this: https://gist.github.com/karenyyng/f19ff75c60f18b4b8149

----------------------------------------------------------------------------------		
confirm if the following is working
sudo apt-get update
sudo apt-get install kdiff3
or
yum install kdiff3	#doesn't work on amazon linux.



git config --global --add merge.tool colordiff

git config --global --add merge.tool kdiff3
git config --global --add mergetool.kdiff3.path "/usr/bin/kdiff3"
git config --global --add mergetool.kdiff3.trustExitCode false
git config --global --add mergetool.prompt false

git config --global --add diff.guitool kdiff3
git config --global --add difftool.kdiff3.path "/usr/bin/kdiff3"
git config --global --add difftool.kdiff3.trustExitCode false
git config --global --add difftool.prompt false	
----------------------------------------------------------------------------------

39.
integrate two branches
	git merge
	git rebase


master 	m1	m2	m3
			f1	f2

		
From f1 
	git rebase master
		
	 

	master
		m1
		m2
			f1 - feature1 started.
			f2
		m3

		git switch f1
		git rebase main
		
		After rebase f1 would be 
			m1
			m2
			m3
			f1
			f2

		git switch main
		git merge f1
		After merge main branch would be 
			m1
			m2
			f1
			f2
			m3
			
-------------------------------------------------------------------------------------
	git checkout master
	vi master
		m1
	git add .
	git commit -m "m1"
	
	git checkout -b f1
	vi feature
		f1
	git add .
	git commit -m "f1"
	git log
		History of f1 includes the history before branching of master.
		So m1 and f1 seen in log
		
	
	git checkout master
	git log
		only m1
		no feature file
		History after branching in features are not available here.

	vi master
		m1
		m2
	git add .
	git commit -m "m2"
	git log
		m1 and m2 seen. but not f1
	
	git checkout f1
	git rebase master
	git log
		m1 m2 f1
		what happened?
		so picks master and applies delta of master and feature on it.
		
	git checkout master
	vi master
		m1
		m2
		m3
	
	git add .
	git commit -m "m3"
	git log
		no f1, only m1, m2, m3
	
	git merge f1
	git log
		m1, m2, m3, f1.
		so starts from master and applies delta on it.
	

40.
-------------------------------------------------------------------
  216  rm -rf Ac_*
  217  ls
  218  git status
  219  git rm Ac*
  220  git status
  221  git add .
  222  git commit -m "remove Ac_ files
  223  git branch
  224  git checkout f1
  225  git status
  226  ls
  227  git log
  
  D:\PraiseTheLord\HSBGInfotech\DevOps\git
	git rebase Vs git merge 
  
  228  git rebase master
  229  git log
  230  clear
  231  git checkout master
  232  git branch
  233  vi master
  234  git add .
  235  git commit -m "m2"
  236  git log
  237  git checkout f1
  238  vi feature
  239  git log
  240  git add .
  241  git commit -m "f3"
  242  git log
  243  git status
  244  git checkout master
  245  git merge f1

-------------------------------------------------------------------------------------			

41. 
Git Stashing
############

  vi file1.txt
  vi file2.txt
  git add file1.txt 
  git status
  git stash save "first stash"
	no commit yet
  git commit -m "testing"
  
  vi file1.txt 
	make some changes and save
  git status
  git stash save 'first stash'
	saving working dir. and index state
  git stash list
  
  git checkout -b branch1
  ls
  git checkout master
  ls
  git branch
  git branch f1
  git checkout f1
  ls
  clear
  git stash list
  git stash apply stash@{0}
  ls
  vi file1.txt
  
  Get back and retain a stash
  git stash show stash@{1}
  git stash show -p stash@{1}
  161  git stash apply stash@{1}
  162  ls
  163  history
  164  git stash list
  
  Get back and delete a  stash
  165  git stash pop
  166  git stash list
  167  git stash pop
  168  git stash save 'test'
  169  git stash list
  
  To delete a particular stash
  170  git stash drop stash@{0}
  
  To delete all stash
  171  git stash clear
  172  git stash list
  173  ls
  174  git status
  175  git revert HEAD
  176  git log
  177  history

42. 
Git Revert
############
	Undo the last change
	But creates a new commit for reverting.
	
	git revert HEAD~1
	
	
Git Reset
############
	git log
	- get a commit id
	git reset <commit id>>
		Retain files added but not the commits.
	
	git reset --hard <<commit id>>
		Delete all files added in between.
		
	


Commits
	1
	2
	3
	4
	5
	6
	7
	8
	
	what to revert back to 4
	
	git reset <commit id of 4>
	or 
	git reset --soft HEAD~1
		reset to 7 - so till 8 will be removed from local repo.
	git reset --mixed HEAD~1
		reset to 7 - so till 8 will be removed from local repo. and staging .
		this is the default 
	git reset --hard HEAD~1
		reset to 7 - so till 8 will be removed from worktree, staging and local repo.
	
	


git revert 
	revert transaction by merging a new transaction 
----------------------------------------------------------------------------
Git rebase vs revert vs reset, restore vs merge
----------------------------------------------------------
	https://opensource.com/article/18/6/git-reset-revert-rebase-commands
	https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/

Git rebase, revert, and reset 
	commands 
		used to modify the history of your Git repository. 
	Each have different purposes 
	should be used in different situations.


git-revert 
	make a new commit that reverts the changes made by other commits.
git-restore 
	restoring files in the working tree from either the index or another commit.
	This command does not update your branch.
	The command can also be used to restore files in the index from another commit.
git-reset 
	update your branch, moving the tip in order to 
		add or remove commits from the branch. 
		This operation changes the commit history.
git reset 
	used to restore the index, overlapping with git restore.
	


Git rebase 
	Purpose:
		Integrates changes 
			from one branch 
			into another.	
	What it does: 	
		Rewrites the history (modifies the base) of your repository.
	use 
		if you have been working on a feature branch 
		you want to merge those changes back into the main branch. 
		or 
		there had been a change in the main branch 
			which should have been present in the history of current branch.
	Rebase	 
		will rewrite the history of your repository, 
		so it is important to use it carefully.
	git rebase -i HEAD~2


Git revert 
	Purpose: 
		Undoes a commit.
			by removing a particular commit and 
			adding a new commit to replace it.
			
			git revert HEAD~1
	What it does: 
		Creates a new commit that 
			reverses the changes made in the original commit.

	This can be useful 
		if you have made a mistake or 
			if you need to go back to a previous version of your code. 
			Revert will create a new commit that reverses the changes made in the original commit.

Git reset 
	git reset --soft HEAD~1: Moves the branch pointer, but keeps the changes staged.
	git reset --mixed HEAD~1: Moves the branch pointer and unstages the changes. (This is the default behavior if no option is specified.)
	git reset --hard HEAD~1: Moves the branch pointer and discards all changes.

	Purpose: 
		Resets the state of your repository to a previous point in time.	
	What it does: 
		Removes all commits that were made after the specified point in time.

	Used to reset the state of your repository to a previous point in time. 
	This can be useful if you have made a mistake and you need to start over. Reset will remove all commits that were made after the specified point in time.


Git restore 
	To restore worktree from stage 
		git restore filename.txt
	To restore a file in the index to match the version in HEAD 
		(this is the same as using git-reset)

		git restore --staged hello.c

	or you can restore both the index and the working tree 
		(this the same as using git-checkout)

		git restore --source=HEAD --staged --worktree hello.c
	
	or the short form which is more practical but less readable:

		git restore -s@ -SW hello.c
	

Here are some additional things to keep in mind when using these commands:

    Git rebase can be disruptive to your team's workflow. If you are working on a shared repository, it is important to coordinate with your team before using rebase.
    Git revert can be used to undo a merge commit. 
	However, it is important to note that revert will not undo the changes that were made in the merged branch.
    Git reset can be used to discard changes that have not been committed yet. However, it is important to note that reset will remove the changes from your working directory and the index.


	
---------------------------------
Create a pull request
---------------------

Find a project you want to contribute to.
Fork it.
Clone it to your local system.
Make a new branch.
Make your changes.
Push it back to your repo.
Click the Compare & pull request button.
Click Create pull request to open a new pull request.
-------------------------------------------	

git mergetool 
	


References to Commands
--------------------------------------------------------------------------------------
	Changed files in working directory
		git status

	Diff in tracked files
		git diff
			make a small change 
			git diff 
				can find change 
			git add .
			git diff 
				no change 
			git diff --cached 
				there is a diff
			git commit -m 'message' 
			git diff --cached 
				no change 
		git diff between branches 		
			git diff main feature2
			git diff -w --stat main feature2
		compare 2 files between 2 different branches 	
			git diff main:./test.txt feature2:./test.txt
	
		git diff between two commits 
			git log --oneline 
			git diff <commit1> <commit2>
			
	
	Stage all current change 
		git add .
	
	Stage a particular file
		git add -p <file>
	
	Commit all changes from staging
		git commit (preferably add -m)
		
	Change the last commit
		git commit -amend
		
		
Commit History
	git log
	
	See changes to a particular file
		git log -p <file>
	
	Who changed what and when in a file
		git blame <file>
		


Branches and Tags
	List all existing branches
		git branch -av
		
	Switch head branch
		git checkout <branch>
		
	Create a new branch 
		based on my current HEAD
		
		git branch <new branch>
		
	Create a new tracking branch based on a remote branch.
		git checkout --track <remote/branch>
		git checkout --track origin/branch_name
	
	Delete a local branch
		git branch -d <branch>
		
	Mark the current commit with a tag
		git tag <tag-name>
		

Update and Publish
	List all currently configured remotes
		git remote -v
		
	Show information about a remote
		git remote show <remote>
--------------------------------------------------------------------------------------
 Push into a particular remote repo.
	git push origin feature1

Git basic commands
-------------------
	https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html
	
	
Un-staging files
----------------

From Git version 2.25.0 onwards, Git will use git restore instead of git reset

git restore --staged CONTRIBUTING.md

git restore CONTRIBUTING.md



git checkout -- <file>


Other good references:
	1. https://shiivangii.medium.com/all-about-git-and-github-c4b987df1b16
	2. https://docs.gitlab.com/ee/topics/git/numerous_undo_possibilities_in_git/
	3. https://www.javatpoint.com/git-ignore
	4. http://swcarpentry.github.io/git-novice/
	
	
----------------
In Git, the git diff command is used to show the changes between two different states of the repository. It allows you to see the differences between commits, branches, or the working directory. Here are some examples of using git diff:

    Difference between Working Directory and Staging Area:
    This command shows the changes between the current state of the files in your working directory and the staging area (index).

git diff

Difference between Working Directory and Last Commit:
This command shows the changes between the current state of the files in your working directory and the last commit.

git diff HEAD

Difference between Two Commits:
This command shows the changes between two specific commits.

php

git diff <commit-hash-1> <commit-hash-2>

Difference between Two Branches:
This command shows the changes between two branches.


git diff <branch-name-1> <branch-name-2>

Difference in a Specific File:
To see the changes for a specific file, add the file path after the git diff command.

lua

git diff <file-path>

Difference in a Specific Directory:
To see the changes for files in a specific directory, add the directory path after the git diff command.

lua

git diff <directory-path>

Difference Summary:
To get a summary of the changes, you can use the --stat option.

bash

git diff --stat

Difference with Color Highlighting:
To display the diff with color highlighting, use the --color option.

css

git diff --color

Difference Summary with Color Highlighting:
To get a summary of the changes with color highlighting, use the --stat and --color options together.

css

git diff --stat --color


---------------

To rename a file in Git, you can use the git mv command, which is a shorthand for moving the file to a new name. The git mv command automatically stages the rename, making it easy to commit the change afterward. Here's the syntax for renaming a file:

lua

git mv <old-file-path> <new-file-path>

Replace <old-file-path> with the current path of the file you want to rename, and <new-file-path> with the new path and name for the file.

For example, if you want to rename a file named oldfile.txt to newfile.txt, you can use the following command:

bash

git mv oldfile.txt newfile.txt

After executing the git mv command, Git will stage the rename, and you can check the status using git status:

vbnet

On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        renamed:    oldfile.txt -> newfile.txt

Now, you can commit the rename:

sql

git commit -m "Rename oldfile.txt to newfile.txt"

The file will now be renamed in the repository, and its history will reflect the rename. It's important to note that git mv is not mandatory for renaming files; you can also use regular file renaming commands provided by your operating system, and then stage and commit the changes separately using git add and git commit. However, git mv is a convenient way to perform the rename in a single step and ensure that the rename is correctly staged for the commit.
	
	
	
-------------------------------------------

Genspark / UST 
--------------

Ignore specific file types while checking in	- done 
Create tags										- done 
Create branches									- done 
Merge branches									- done 
Rebase branches									- done
Revert a commit									- done
Find the difference between files				- done 
Clone a local repository						- done 
Clone a remote repository over HTTPS			- done 
Fork a repository								- not required 
Push to a remote repository						- done 
Create pull requests							- done 
Debug and manage conflicts						- done 
Add users and groups							- done 
Create projects									- missing 
Change and merge changes						- done 
issues etc. 									- missing 





push a local branch to repo  
----------------------------
mkdir newrepo
cd newrepo 
git init 

